alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
ggplot(aes(x,x0,)+geom_point())
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
A <- matrix(c(4, 1, 1, 3), nrow = 2)
b <- c(1, 2)
x0 <- c(0, 0)
tol <- 1e-10
maxiter <- 1000
gradient_conjugue(A, b, x0, tol, maxiter)
source("C:/Users/brice/OneDrive/Bureau/Course Files - Introduction to R/YANKAM/R/gradconj.R")
#'
#' @return    la solution de Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' gradient_conjugue(A, b, x0, tol, maxiter)
#' @export
gradient_conjugue <- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
ggplot(aes(x,x0,color="blue")+geom_point())
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}
A <- matrix(c(4, 1, 1, 3), nrow = 2)
b <- c(1, 2)
x0 <- c(0, 0)
tol <- 1e-10
maxiter <- 1000
gradient_conjugue(A, b, x0, tol, maxiter)
library(ggplot2)
gradient_conjugue(A, b, x0, tol, maxiter)
gradient_conjugue(A, b, x0, tol, maxiter)
gradient_conjugue(A, b, x0, tol, maxiter)
source("C:/Users/brice/OneDrive/Bureau/Course Files - Introduction to R/YANKAM/R/gradconj.R")
library(YANKAM)
?YANKAM
??YANKAM
?ggplot2
??ggplot2
example(ggplot2)
example("ggplot2")
A <- matrix(c(4,7,9,6,3,4,7,3,4),nrow = 3,ncol=3)
b <- c(4,2,3)
x0 <- c(1,1,1)
tol <- 1-10e
maxiter <- 1000
gradient_conjugue(A,b,x0,tol,maxiter)
tol <- 1e-10
maxiter <- 1000
gradient_conjugue(A,b,x0,tol,maxiter)
gradient_conjugue(A,b,x0,tol,maxiter)
tol <- 1e-6
maxiter <- 1000
gradient_conjugue(A,b,x0,tol,maxiter)
source("C:/Users/brice/OneDrive/Bureau/Course Files - Introduction to R/YANKAM/R/YANKAM.R", echo=TRUE)
source("C:/Users/brice/OneDrive/Bureau/Course Files - Introduction to R/YANKAM/R/gradconj.R")
library(YANKAM)
example(YANKAM)
A
B <- matrix
B <- matrix(c(4,2,8,6,1,2,3,4,6),nrow = 3,ncol=3)
j <- c(7,6,2)
x0 <- c(0,0,0)
tol <- 1e-10
maxiter
YANKAM(B,j,x0,tol,maxiter)
?YANKAM
#' Cette fonction calcule le gradient d'une fonction à n variables.
#'
#' @param f La fonction à dériver.
#' @param x Le vecteur de variables.
#' @return Le gradient de la fonction.
#'
#' @examples
#' gradient(function(x,y) sum(x^2,y), c(1, 2, 3))
#'
#' @export
gradient <- function(f, x,y) {
numDeriv::grad(f, x,y)
}
gradient(function(x,y) sum(x^2,y), c(1, 2, 3))
gradient(function(x,y) sum(x^2,y), c(1, 2, 3))
library(YANKAM)
source("C:/Users/brice/OneDrive/Bureau/Course Files - Introduction to R/YANKAM/yang/R/gradconj.R")
library(YANKAM)
?YANKAM
A <- matrix(c(4, 1, 1, 3), nrow = 2)
eigen(A)$val
YANKAM<- function(A, b, x0, tol, max_iter) {
if(eigen(A)$val>0)
{
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
ggplot2(aes(x))
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}else
{print("cette matrice n'est pas symétrique definie positive")}
}
A <- matrix(c(4, 1, 1, 3), nrow = 2)
b <- c(1, 2)
x0 <- c(0, 0)
tol <- 1e-10
maxiter <- 1000
YANKAM(A, b, x0, tol, maxiter)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
if(eigen(A)$val>1)
{
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
ggplot2(aes(x))
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}else
{print("cette matrice n'est pas symétrique definie positive")}
}
YANKAM(A, b, x0, tol, maxiter)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
ggplot2(aes(x))
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}
YANKAM(A, b, x0, tol, maxiter)
A <- matrix(c(4, 3, 1, 3), nrow = 2)
eigen(A)$val
A <- matrix(c(4, 3, 1, -3), nrow = 2)
eigen(A)$val
A <- matrix(c(4, 3, 1, -3), nrow = 2)
YANKAM(A, b, x0, tol, maxiter)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
plot(x)
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}
YANKAM(A, b, x0, tol, maxiter)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}
YANKAM(A, b, x0, tol, maxiter)
A
YANKAM(A, b, x0, tol, maxiter)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
plot(aes(x,max_it,type="o"))
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}
A <- matrix(c(4, 1, 1, 3), nrow = 2)
b <- c(1, 2)
x0 <- c(0, 0)
tol <- 1e-10
maxiter <- 1000
YANKAM(A, b, x0, tol, maxiter)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
plot(x,max_it,type="o")
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}
YANKAM(A, b, x0, tol, maxiter)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
plot(x,max_iter,type="o")
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}
YANKAM(A, b, x0, tol, maxiter)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter,plot_chart=TRUE) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
x_values <-x
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
if (sqrt(sum(r * r)) < tol) break{
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter,plot_chart=TRUE) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
x_values <-x
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) break{
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
plot(x)
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter,plot_chart=TRUE) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
x_values <- x
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
x_values <- rbind(x_values, x)
}
}  if (plot_chart) {
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
x_values <- rbind(x_values, x)
}
}  if(plot_chart) {
return(x)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter,plot_chart=TRUE) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
x_values <- x
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
x_values <- rbind(x_values, x)
}
}  if(plot_chart) {
