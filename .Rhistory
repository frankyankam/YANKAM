#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
ggplot2(aes(x))
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}
YANKAM(A, b, x0, tol, maxiter)
A <- matrix(c(4, 3, 1, 3), nrow = 2)
eigen(A)$val
A <- matrix(c(4, 3, 1, -3), nrow = 2)
eigen(A)$val
A <- matrix(c(4, 3, 1, -3), nrow = 2)
YANKAM(A, b, x0, tol, maxiter)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
plot(x)
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}
YANKAM(A, b, x0, tol, maxiter)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}
YANKAM(A, b, x0, tol, maxiter)
A
YANKAM(A, b, x0, tol, maxiter)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
plot(aes(x,max_it,type="o"))
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}
A <- matrix(c(4, 1, 1, 3), nrow = 2)
b <- c(1, 2)
x0 <- c(0, 0)
tol <- 1e-10
maxiter <- 1000
YANKAM(A, b, x0, tol, maxiter)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
plot(x,max_it,type="o")
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}
YANKAM(A, b, x0, tol, maxiter)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
plot(x,max_iter,type="o")
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}
YANKAM(A, b, x0, tol, maxiter)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter,plot_chart=TRUE) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
x_values <-x
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
if (sqrt(sum(r * r)) < tol) break{
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter,plot_chart=TRUE) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
x_values <-x
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) break{
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
plot(x)
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter,plot_chart=TRUE) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
x_values <- x
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
x_values <- rbind(x_values, x)
}
}  if (plot_chart) {
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
x_values <- rbind(x_values, x)
}
}  if(plot_chart) {
return(x)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter,plot_chart=TRUE) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
x_values <- x
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
x_values <- rbind(x_values, x)
}
}  if(plot_chart) {
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
x_value <-x
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
x_value <- rbind(x_value,x)
}
eigenvalues <- eigen(A)$values
plot(x_values, type = "l", main = "Valeurs de x au fil des itérations")
abline(h = eigenvalues[1], col = "red", lty = 2)
abline(h = eigenvalues[2], col = "blue", lty = 2)
}
return(x)
}
A <- matrix(c(4, 1, 1, 3), nrow = 2)
b <- c(1, 2)
x0 <- c(0, 0)
tol <- 1e-10
maxiter <- 1000
YANKAM(A, b, x0, tol, maxiter)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
x_value <- x
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
x_value <- rbind(x)
}
eigenvalues <- eigen(A)$values
plot(x_values, type = "l", main = "Valeurs de x au fil des itérations")
abline(h = eigenvalues[1], col = "red", lty = 2)
abline(h = eigenvalues[2], col = "blue", lty = 2)
}
return(x)
}
YANKAM(A, b, x0, tol, maxiter)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
eigenvalues <- eigen(A)$values
plot(x, type = "l", main = "Valeurs de x au fil des itérations")
abline(h = eigenvalues[1], col = "red", lty = 2)
abline(h = eigenvalues[2], col = "blue", lty = 2)
}
return(x)
}
YANKAM(A, b, x0, tol, maxiter)
A <- matrix(c(4, 3, 1, 3), nrow = 2)
YANKAM(A, b, x0, tol, maxiter)
library(YANKAM)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter,plot_chart=TRUE) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}if (plot_chart)
return(x)
#'
#' @return    solution Ax=b
#' @examples
#'  A <- matrix(c(4, 1, 1, 3), nrow = 2)
#' b <- c(1, 2)
#' x0 <- c(0, 0)
#' tol <- 1e-10
#' maxiter <- 1000
#' YANKAM(A, b, x0, tol, maxiter)
#' @export
YANKAM<- function(A, b, x0, tol, max_iter,plot_chart=TRUE) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}if (plot_chart){
example("YANKAM")
library(YANKAM)
example("YANKAM-package")
?`YANKAM-package`
library(YANKAM)
?`YANKAM-package`
example("YANKAM-package")
?YANKAM
?gradconj
library(YANKAM)
?`YANKAM-package`
library(YANKAM)
example("YANKAM-package")
example("YANKAM")
library(YANKAM)
example("YANKAM-package")
library(YANKAM)
example("YANKAM-package")
library(YANKAM)
example("YANKAM-package")
