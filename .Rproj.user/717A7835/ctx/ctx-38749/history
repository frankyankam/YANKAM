library(YANKAM)
library(YANKAM)
library(YANKAM)
?gradient_conjugue
library(YANKAM))
library(YANKAM)
?gradient_conjugue
gradient_conjugue <- function(A, b, x0, tol, max_iter) {
n <- length(x0)
x <- x0
r <- b - A %*% x
p <- r
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
return(x)
}
A <- matrix(c(4, 1, 1, 3), nrow = 2)
b <- c(1, 2,4)
x0 <- c(0, 0,7)
tol <- 1e-10
maxiter <- 1000
gradient_conjugue(A, b, x0, tol, maxiter)
x0 <- c(0, 0,0)
tol <- 1e-10
maxiter <- 1000
gradient_conjugue(A, b, x0, tol, maxiter)
A <- matrix(c(4, 1, 1, 3,4,7,7,5,2), nrow = 3)
b <- c(1, 2,4)
x0 <- c(0, 0,0)
tol <- 1e-10
maxiter <- 1000
gradient_conjugue(A, b, x0, tol, maxiter)
plot(gradient_conjugue())
plot(gradient_conjugue(A,b,x0,tol,maxiter))
library(ggplot2)
for (k in 1:max_iter) {
alpha <- sum(r * r) / sum(p * (A %*% p))
x <- x + alpha * p
r_prev <- r
r <- r - alpha * (A %*% p)
beta <- sum(r * r) / sum(r_prev * r_prev)
p <- r + beta * p
if (sqrt(sum(r * r)) < tol) {
break
}
}
A <- matrix(c(4, 1, 1, 3,4,7,7,5,2), nrow = 3)
b <- c(1, 2,4)
x0 <- c(0, 0,0)
tol <- 1e-10
maxiter <- 1000
gradient_conjugue(A, b, x0, tol, maxiter)
library(YANKAM)
gradient_conjugue(A, b, x0, tol, maxiter)
ggplot(gradient_conjugue,aes(x))+geom_point()
ggplot(gradient_conjugue,aes(x,x0))+geom_point()
ggplot(data=gradient_conjugue,aes(x,x0))+geom_point()
ggplot(data=gradient_conjugue,aes(x=x,y=x0))+geom_point()
ggplot(data=gradient_conjugue)+geom_point()
ggplot(data=gradient_conjugue,aes(x,maxiter))+geom_point()
ggplot(data="gradient_conjugue",aes(x,maxiter))+geom_point()
ggplot(aes(x,maxiter))+geom_point()
gradient_conjugue(A, b, x0, tol, maxiter)+ggplot(aes(x,maxiter))+geom_point()
install.packages("numDeriv")
source("C:/Users/brice/OneDrive/Bureau/Course Files - Introduction to R/YANKAM/R/gradconj.R")
library(YANKAM)
?gradient
# Retourner le gradient
return(grad)
# Calculer les dérivées partielles de f par rapport à chaque variable xi
df_dx <- sapply(seq_along(x), function(i) {
D(f, paste0("x", i))
})
gradient <- function(f, x) {
# Calculer les dérivées partielles de f par rapport à chaque variable xi
df_dx <- sapply(seq_along(x), function(i) {
D(f, paste0("x", i))
})
# Calculer le gradient de f
grad <- df_dx(x)
# Retourner le gradient
return(grad)
}
f <- x1.x2+x2.x1
f <- paste(c("x"),(1,2))
f <- paste(c("x"),c(1,2))
f
f <-"x1.x2"+"x2.x1"
library(YANKAM)
?gradient
gradient <- function(f, x) {
# Calculer les dérivées partielles de f par rapport à chaque variable xi
df_dx <- sapply(seq_along(x), function(i) {
D(f, paste0("x", i))
})
# Calculer le gradient de f
grad <- df_dx(x)
# Retourner le gradient
return(grad)
}
f <- function(x) {
return(x[1]^2 + x[2]^2+3*x[2]+2*x[1]) }
x <- c(1, 1)
gradient <- function(f, x)
x <- c(1, 1)
gradient(f,x)
grad
print(gradient)
print(gradient(f,x))
hessian <- function(f, x) {
n <- length(x)
hess <- matrix(0, n, n)
h <- 1e-4
for (i in 1:n) {
for (j in i:n) {
hess[i, j] <- (f(x + h * c(i == 1, i == 2, i == 3)) - f(x)) / h
if (i != j) {
hess[j, i] <- hess[i, j]
}
}
}
return(hess)
}
f <- function(x) {
#   x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
return(x1^2 + x2^3 + x3^4)
}
hessian(f, x = c(1, 2, 3))
f <- function(x) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
return(x1^2 + x2^3 + x3^4)
}
hessian(f, x = c(1, 2, 3))
